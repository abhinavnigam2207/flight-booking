{"version":3,"sources":["components/core/header/header.js","components/core/header/index.js","components/searchFlights/constants.js","components/searchFlights/searchFlights.js","components/searchFlights/index.js","components/flights/flights.js","components/flights/index.js","components/core/root/App.js","serviceWorker.js","index.js"],"names":["headStyle","css","Header","cities","title","id","container","left","right","btn","formBox","formControlStyle","SearchFlights","searchAction","useState","isTwoWay","setIsTwoWay","fromCity","setFromCity","toCity","setToCity","Date","departureDate","setDepartureDate","returnDate","setReturnDate","passengers","setPassengers","Button","disabled","onClick","Autocomplete","options","autoComplete","openOnFocus","value","onChange","event","newValue","getOptionLabel","option","renderInput","params","TextField","onMouseDownCapture","e","stopPropagation","label","utils","DateFnsUtils","DatePicker","disableToolbar","variant","format","style","width","disablePast","autoOk","date","KeyboardButtonProps","type","target","InputProps","inputProps","min","max","InputLabelProps","shrink","color","sectionCSS","w30","w70","Flights","setFilterData","searchData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e62bc419.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\n\r\nconst headStyle = css`\r\n  height: 40px;\r\n  font-size: 25px;\r\n  margin: 0px;\r\n  padding: 5px;\r\n  font-family: system-ui;\r\n  border-bottom: 1px solid grey;\r\n`;\r\n\r\nexport default () => (\r\n  <header>\r\n    <h1 css={headStyle}>\r\n      Flight Search App\r\n    </h1>\r\n  </header>\r\n);\r\n","import Header from './header';\r\n\r\nexport default Header;","export const cities = [\r\n  { title: 'Pune (PNQ)', id: 'PNQ' },\r\n  { title: 'Mumbai (BOM)', id: 'BOM' },\r\n  { title: 'Bangalore(BLR)', id: 'BLR' },\r\n  { title: 'Delhi (DEL)', id: 'DEL' }\r\n];","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { cities } from './constants';\r\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\r\n\r\nconst container = css`\r\n  padding: 15px 5px;\r\n  border-right: 1px solid lightgray;\r\n`;\r\nconst left = css`border-right: 0px; border-radius: 5px 0px 0px 0px !important;`;\r\nconst right = css`border-left: 0px; border-radius: 0px 5px 0px 0px !important;`;\r\nconst btn = css`\r\n  width: 35%;\r\n  border: 1px solid lightgray !important;\r\n  :disabled{\r\n    background: #2196F3;\r\n    color: white !important;\r\n  }\r\n`;\r\nconst formBox = css`\r\n  border: 1px solid lightgray;\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n`;\r\nconst formControlStyle = css`margin: 10px 0px;`;\r\n\r\nexport default ({searchAction}) => {\r\n  const [isTwoWay, setIsTwoWay] = useState(true);\r\n  const [fromCity, setFromCity] = useState(null);\r\n  const [toCity, setToCity] = useState(null);\r\n  const [departureDate, setDepartureDate] = useState(new Date());\r\n  const [returnDate, setReturnDate] = useState(null);\r\n  const [passengers, setPassengers] = useState(1);\r\n\r\n  const search = () => {\r\n    searchAction({\r\n      departureDate, returnDate, passengers, fromCity, toCity\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div css={container}>\r\n      <Button css={[btn, left]} disabled={!isTwoWay} onClick={()=> {setIsTwoWay(false);}}>One Way</Button>\r\n      <Button css={[btn, right]} disabled={isTwoWay} onClick={()=> {setIsTwoWay(true);}}>Return</Button>\r\n      <div css={formBox}>\r\n        <div css={formControlStyle}>\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={cities}\r\n            autoComplete={false}\r\n            openOnFocus={false}\r\n            value={fromCity}\r\n            onChange={(event, newValue) => {\r\n              setFromCity(newValue);\r\n            }}\r\n            getOptionLabel={(option) => option.title}\r\n            renderInput={(params) => <TextField onMouseDownCapture={(e) => e.stopPropagation()} {...params} label=\"Enter Origin City\" />}\r\n          />\r\n        </div>\r\n        <div css={formControlStyle}>\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={cities}\r\n            autoComplete={false}\r\n            openOnFocus={false}\r\n            value={toCity}\r\n            onChange={(event, newValue) => {\r\n              setToCity(newValue);\r\n            }}\r\n            getOptionLabel={(option) => option.title}\r\n            renderInput={(params) => <TextField onMouseDownCapture={(e) => e.stopPropagation()} {...params} label=\"Enter Destination City\" />}\r\n          />\r\n        </div>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <div css={formControlStyle}>\r\n            <DatePicker\r\n              disableToolbar\r\n              variant=\"inline\"\r\n              format=\"MM/dd/yyyy\"\r\n              id=\"departure-date-picker\"\r\n              label=\"Departure Date\"\r\n              value={departureDate}\r\n              style={{width: '100%'}}\r\n              disablePast\r\n              autoOk\r\n              onChange={(date) => { setDepartureDate(date);}}\r\n              KeyboardButtonProps={{ 'aria-label': 'change Departure Date' }}\r\n            />\r\n          </div>\r\n          {isTwoWay && <div css={formControlStyle}>\r\n            <DatePicker\r\n              disableToolbar\r\n              variant=\"inline\"\r\n              format=\"MM/dd/yyyy\"\r\n              id=\"return-date-picker\"\r\n              label=\"Return Date\"\r\n              value={returnDate}\r\n              style={{width: '100%'}}\r\n              disablePast\r\n              autoOk\r\n              onChange={(date) => { setReturnDate(date);}}\r\n              KeyboardButtonProps={{ 'aria-label': 'change Return Date' }}\r\n            />\r\n          </div>}\r\n        </MuiPickersUtilsProvider>\r\n        <div css={formControlStyle}>\r\n          <TextField\r\n              id=\"passengers-input\"\r\n              label=\"Passengers\"\r\n              type=\"number\"\r\n              value={passengers}\r\n              onChange={(e) => {setPassengers(e.target.value)}}\r\n              style={{width: '100%'}}\r\n              InputProps={{ inputProps: { min: 0, max: 10 } }}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n        </div>\r\n        <div css={formControlStyle}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={search}>Search</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import SearchFlights from './searchFlights';\r\n\r\nexport default SearchFlights;","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport { useState, Fragment } from 'react';\r\nimport SearchFlights from '../searchFlights';\r\n// import FlightResults from '../flightResults';\r\n\r\nconst sectionCSS = css`\r\n  display: inline-block;\r\n  @media (max-width: 767px) {\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n`;\r\nconst w30 = css`width: 25%;`;\r\nconst w70 = css`width: 75%;`;\r\n\r\nexport default () => {\r\n  const [filterData, setFilterData] = useState({});\r\n\r\n  const search = (searchData) => { setFilterData(searchData); };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div css={[sectionCSS, w30]}><SearchFlights searchAction={search} /></div>\r\n      <div css={[sectionCSS, w70]}></div>\r\n    </Fragment>\r\n  );\r\n}\r\n","import Flights from './flights';\r\n\r\nexport default Flights;","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Fragment } from 'react';\nimport Header from '../header';\nimport Fights from '../../flights';\nimport './App.css';\n\nexport default () => {\n  return (\n    <Fragment>\n      <Header/>\n      <Fights />\n    </Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/core/root/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}